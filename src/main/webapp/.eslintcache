[{"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\index.js":"1","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\App.js":"2","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\login\\Login.jsx":"3","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\AppRouter.jsx":"4","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\Home.jsx":"5","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\common\\TabPanel.js":"6","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\creator-tabs\\UsersTab.jsx":"7","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\creator-tabs\\WebmonsTab.jsx":"8","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\js\\common.js":"9","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\footer\\footer.jsx":"10"},{"size":371,"mtime":1608724366781,"results":"11","hashOfConfig":"12"},{"size":603,"mtime":1609915673174,"results":"13","hashOfConfig":"12"},{"size":4562,"mtime":1610179488152,"results":"14","hashOfConfig":"12"},{"size":496,"mtime":1608786013877,"results":"15","hashOfConfig":"12"},{"size":21158,"mtime":1610175877081,"results":"16","hashOfConfig":"12"},{"size":710,"mtime":1609915561436,"results":"17","hashOfConfig":"12"},{"size":25212,"mtime":1609989501304,"results":"18","hashOfConfig":"12"},{"size":21445,"mtime":1609989815561,"results":"19","hashOfConfig":"12"},{"size":393,"mtime":1609916471353,"results":"20","hashOfConfig":"12"},{"size":333,"mtime":1609802616980,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"1y5lcrj",{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\index.js",["48","49"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["50","51"],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\App.js",["52","53","54","55"],"import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport React from 'react';\r\nimport AppRouter from './components/AppRouter';\r\nimport Footer from './components/footer/footer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <div>\r\n         <div className=\"main\" style={{minHeight:\"100vh\"}}>\r\n          <AppRouter/>\r\n        </div>\r\n        {/* <div>\r\n          <Footer />\r\n        </div> */}\r\n        \r\n      </div>\r\n     \r\n    </React.Fragment>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\login\\Login.jsx",["56","57"],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\AppRouter.jsx",[],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\Home.jsx",["58","59","60"],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\common\\TabPanel.js",["61"],"import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nexport default class TabPanel extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  \r\n  render(){\r\n    const { children, value, index, ...other } = this.props;\r\n    return (\r\n        <div\r\n          role=\"tabpanel\"\r\n          hidden={value !== index}\r\n          id={`simple-tabpanel-${index}`}\r\n          aria-labelledby={`simple-tab-${index}`}\r\n          {...other}\r\n        >\r\n          {value === index && (\r\n            <Box p={3}>\r\n              <Typography>{children}</Typography>\r\n            </Box>\r\n          )}\r\n        </div>\r\n      );\r\n  }\r\n  \r\n}","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\creator-tabs\\UsersTab.jsx",["62"],"import React from 'react';\r\nimport $ from 'jquery';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { ColumnDirective, ColumnsDirective, GridComponent, Inject, Page } from '@syncfusion/ej2-react-grids';\r\nimport { \r\n  Button, \r\n  Grid, LinearProgress, Card , CardContent, CardActions,\r\n  Dialog, DialogActions, DialogContent, DialogContentText,DialogTitle, Snackbar, IconButton, Tooltip\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport {ReactComponent as AttackIcon} from '../../../misc/icons/attack_dmg.svg';\r\nimport {ReactComponent as HealthIcon} from '../../../misc/icons/health_icon.svg';\r\nimport {ReactComponent as PhysicalDefIcon} from '../../../misc/icons/physical_def_icon.svg';\r\nimport {ReactComponent as MagicDefIcon} from '../../../misc/icons/magic_def_icon.svg';\r\nimport \"../../../css/common.css\";\r\nimport \"../../../css/override-ej2.css\";\r\nimport { colorRating } from  '../../../js/common';\r\n\r\nconst styles = theme => ({\r\n  noButtonOutline: {\r\n    '& button:focus': {\r\n      outline:'none'\r\n    }\r\n  }\r\n});\r\nclass UsersTabs extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      readOnly: this.props.isShow,  \r\n      users:[],\r\n      webmons:[],\r\n      userWebmons:[],\r\n      openDialog: false,\r\n      openWebmonsDialog: false,\r\n      openDeleteDialog: false,\r\n      isCreateDialog: true,\r\n      isAddUserWebmon:true,\r\n      formErrorMessage: \"\",\r\n      uMonErormErrorMessage:\"\",\r\n      dialogProgress: false,\r\n      dialogProgressDelete: false,\r\n      snackBarSuccess:false,\r\n      snackBarMessage:\"\",\r\n      userToDelete: \"\",\r\n      webmonsUser: null,\r\n      openAddEditWebmon: false,\r\n      inputFields:{\r\n        userId: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        umWebmon: \"\",\r\n        umName: \"\",\r\n        umId:\"\",\r\n        umLevel:\"\"\r\n      },\r\n      inputError:{\r\n        uName: false,\r\n        uEmail: false,\r\n        umWebmon: false,\r\n        umName: \"\"\r\n        \r\n      }\r\n    }\r\n\r\n    this.grid = null;\r\n    this.template = this.gridTemplate.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getUsers();\r\n    this.getWebmons();\r\n  }\r\n\r\n  getUsers(){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getUsers\",\r\n      type: \"GET\",\r\n      success: function(response){\r\n        if(response.result === \"success\"){\r\n          that.setState({users: response.users})\r\n        }\r\n      },\r\n      error: function(error){\r\n        console.log(error);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  getWebmons(){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getWebmons\",\r\n      type: \"GET\",\r\n      success: function(response){\r\n        if(response.result === \"success\"){\r\n          that.setState({webmons: response.webmons})\r\n        }\r\n      },\r\n      error: function(error){\r\n        console.log(error);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  getUserWebmons(id){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getScaledUserWebmons\",\r\n      data:{\r\n        userId: id\r\n      },\r\n      type: \"GET\",\r\n      success: function(response){\r\n        if(response.result === \"sucess\"){\r\n          that.setState({userWebmons: response.scaledUserWebmons})\r\n        }\r\n      },\r\n      error: function(error){\r\n        console.log(error);\r\n      }\r\n\r\n    });\r\n  }\r\n  \r\n  handleCloseDialog(){\r\n    this.setState({openDialog:false, formErrorMessage:\"\",isCreateDialog:true,\r\n    inputError:{\r\n      uName: false,\r\n      uEmail: false },\r\n    inputFields:{\r\n      userId: \"\",\r\n      name: \"\",\r\n      email: \"\",}})\r\n    this.userFormRef.reset();\r\n  }\r\n\r\n  handleAddUpdateUser(){\r\n    const that = this;\r\n    let formData = new FormData(document.getElementById(\"userForm\"));\r\n    let isError = false;\r\n    let errorFields = {};\r\n    let errorState = {};\r\n    let url = \"\";\r\n    for(let pair of formData.entries()){\r\n      if(!pair[1]){\r\n        errorFields[`u${pair[0].charAt(0).toUpperCase() + pair[0].slice(1)}`] = true;\r\n        isError = true;\r\n      }else{\r\n        errorFields[`u${pair[0].charAt(0).toUpperCase() + pair[0].slice(1)}`] = false;\r\n      }\r\n    }\r\n\r\n    errorState['inputError'] = errorFields;\r\n    if(isError){\r\n      this.setState(errorState)\r\n      this.setState({formErrorMessage: \"\"});\r\n    }else{\r\n\r\n      if(this.state.isCreateDialog){\r\n        url = \"createUser\";\r\n      }else{\r\n        url = \"updateUser\"\r\n        formData.append(\"userId\",this.state.inputFields.userId)\r\n      }\r\n      this.setState({dialogProgress:true})\r\n       $.ajax({\r\n        url: url,\r\n        data: formData,\r\n        type: 'POST',\r\n        processData: false,\r\n        contentType:false,\r\n        success: function(response){\r\n          if(response.result === \"success\"){\r\n            that.getUsers();\r\n            that.setState({snackBarSuccess:true, dialogProgress:false})\r\n\r\n            if(that.state.isCreateDialog){\r\n              that.setState({snackBarMessage:\"User successfully created!\"})\r\n            }else{\r\n              that.setState({snackBarMessage:\"User successfully updated!\"})\r\n            }\r\n\r\n            that.grid.refresh();\r\n            that.handleCloseDialog();\r\n          }else{\r\n            that.setState({dialogProgress:false})\r\n            let error = response.error;\r\n            if(error.includes(\"Validation failed for classes [com.wb.web.model.User]\")){\r\n              that.setState({formErrorMessage: \"Invalid Email Address\"});    \r\n            }else{\r\n              that.setState({formErrorMessage: response.error});\r\n            }\r\n            \r\n          }\r\n        },\r\n        error: function(xhr){\r\n          const errorMessage = xhr.responseJSON.status + \" \" + xhr.responseJSON.error;\r\n          that.setState({formErrorMessage: errorMessage, dialogProgress:false});\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleAddEditUserWebmon(){\r\n    const that = this;\r\n    let formData = new FormData(document.getElementById(\"userWebmonForm\"));\r\n    let isError = false;\r\n    let errorFields = {};\r\n    let errorState = {};\r\n    let url = \"\";\r\n\r\n     for(let pair of formData.entries()){\r\n      if(!pair[1]){\r\n        errorFields[`um${pair[0].charAt(0).toUpperCase() + pair[0].slice(1)}`] = true;\r\n        isError = true;\r\n      }else{\r\n        errorFields[`um${pair[0].charAt(0).toUpperCase() + pair[0].slice(1)}`] = false;\r\n      }\r\n    }\r\n\r\n    errorState['inputError'] = errorFields;\r\n    if(isError){\r\n      this.setState(errorState)\r\n      this.setState({uMonErormErrorMessage: \"\"});\r\n    }else{\r\n\r\n\r\n      if(this.state.isAddUserWebmon){\r\n        url = \"createUserWebmon\";\r\n        formData.append(\"userId\",this.state.webmonsUser); \r\n      }else{\r\n        url = \"updateUserWebmon\"\r\n        formData.append(\"userWebmonId\",this.state.inputFields.umId);\r\n      }\r\n\r\n      this.setState({dialogProgress:true})\r\n       $.ajax({\r\n        url: url,\r\n        data: formData,\r\n        type: 'POST',\r\n        processData: false,\r\n        contentType:false,\r\n        success: function(response){\r\n          if(response.result === \"success\"){\r\n            ;\r\n            that.setState({snackBarSuccess:true, dialogProgress:false})\r\n            that.getUserWebmons(that.state.webmonsUser)\r\n            if(that.state.isAddUserWebmon){\r\n              that.setState({snackBarMessage:\"Webmon successfully added!\"});\r\n            }else{\r\n              that.setState({snackBarMessage:\"Webmon successfully updated!\"})\r\n            }\r\n\r\n            that.grid.refresh();\r\n            that.handleCloseAddEditUserWebmon();\r\n          }else{\r\n            that.setState({dialogProgress:false})\r\n            let error = response.error;\r\n            \r\n          }\r\n        },\r\n        error: function(xhr){\r\n          const errorMessage = xhr.responseJSON.status + \" \" + xhr.responseJSON.error;\r\n          that.setState({formErrorMessage: errorMessage, dialogProgress:false});\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  handleOpenAddUmon(){\r\n    this.setState({openAddEditWebmon:true, isAddUserWebmon:true})\r\n  }\r\n\r\n  handleOpenEditUmon(){\r\n    this.setState({openAddEditWebmon:true, isAddUserWebmon:false})\r\n  }\r\n\r\n  handleCloseAddEditUserWebmon(){\r\n    this.setState({openAddEditWebmon:false, inputFields:{\r\n        userId: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        umWebmon: \"\",\r\n        umName: \"\",\r\n        umId:\"\",\r\n        umLevel:\"\"\r\n      },\r\n      inputError:{\r\n        uName: false,\r\n        uEmail: false,\r\n        umWebmon: false,\r\n        umName: \"\"\r\n        \r\n      }})\r\n  }\r\n\r\n  handleDeleteUser(){\r\n    const that = this;\r\n    $.ajax({\r\n      url: \"deleteUser\",\r\n      data: {\r\n        userId: this.state.userToDelete\r\n      },\r\n      type: 'DELETE',\r\n      success: function(response){\r\n        if(response.result === \"success\"){\r\n          that.getUsers();\r\n          that.grid.refresh();\r\n          that.handleCloseDeleteDialog();\r\n          that.setState({snackBarSuccess: true, snackBarMessage:\"User successfully deleted!\"})\r\n        }\r\n      },\r\n      error: function(xhr){\r\n          const errorMessage = xhr.responseJSON.status + \" \" + xhr.responseJSON.error;\r\n          that.setState({formErrorMessage: errorMessage, dialogProgress:false});\r\n      }\r\n    })\r\n  }\r\n\r\n  handleOpenEditDialog(props){\r\n    let state = {};\r\n    let inputField = {};\r\n    inputField['userId'] = props.id;\r\n    inputField['name'] = props.name;\r\n    inputField['email'] = props.email;\r\n    state['inputFields'] = inputField;\r\n    state['isCreateDialog'] = false;\r\n    state['openDialog'] = true;\r\n    this.setState(state);\r\n    \r\n  }\r\n\r\n  handleOpenWebmonsDialog(props){\r\n    this.setState({webmonsUser: props.id, openWebmonsDialog:true});\r\n    this.getUserWebmons(props.id);\r\n    \r\n  }\r\n  \r\n  handleOpenDeleteDialog(props){\r\n    this.setState({openDeleteDialog:true, userToDelete: props.id})\r\n  }\r\n\r\n  handleCloseDeleteDialog(){\r\n    this.setState({formErrorMessage:\"\",openDeleteDialog:false, userToDelete:0, dialogProgressDelete:false})\r\n  }\r\n\r\n  handleCloseWebmonsDialog(){\r\n    this.setState({openWebmonsDialog:false, webmonsUser: null, userWebmons:[]});\r\n    this.handleCloseAddEditUserWebmon();\r\n  }\r\n  \r\n  handleDeleteUserWebmon(id){\r\n    const that = this;\r\n    $.ajax({\r\n      url: \"deleteUserWebmon\",\r\n      data: {userId: this.state.webmonsUser, userWebmonId: id},\r\n      type: \"DELETE\",\r\n      success: function(response){\r\n        if(response.result === \"success\"){\r\n          that.getUserWebmons(that.state.webmonsUser);\r\n          that.setState({snackBarSuccess:true, snackBarMessage:\"Webmon successfully deleted!\"});\r\n        }\r\n      },\r\n      error: function(xhr){\r\n\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  handleEditUserWebmon(webmon){\r\n    let state = {};\r\n    let inputField = {};\r\n    inputField['umWebmon'] = webmon.webmonId;\r\n    inputField['umName'] = webmon.name;\r\n    inputField['umLevel'] = webmon.level;\r\n    inputField['umId'] = webmon.id;\r\n    state['inputFields'] = inputField;\r\n    state['isAddUserWebmon'] = false;\r\n    this.setState(state);\r\n\r\n    this.handleOpenEditUmon();\r\n\r\n    \r\n  }\r\n\r\n  gridTemplate(props) {\r\n  const { classes } = this.props;\r\n  return (\r\n    <Grid container className={classes.templateGrid}>\r\n      <Grid item sm=\"1\" className=\"d-none d-sm-block\">{props.id}</Grid>\r\n      <Grid item xs=\"7\" sm={this.state.readOnly ? \"4\" : \"3\"}>{props.name}</Grid>\r\n      <Grid item sm={this.state.readOnly ? \"4\" : \"3\"} className=\"d-none d-sm-block\">{props.email}</Grid>\r\n      <Grid item xs=\"2\" sm=\"2\" >\r\n        <Tooltip title=\"Show owned webmons\" arrow>\r\n            <IconButton size=\"small\" color=\"primary\"\r\n              onClick={()=>{this.handleOpenWebmonsDialog(props)}}>\r\n              <ViewListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n      </Grid>\r\n    {!this.state.readOnly ?\r\n      <Grid item xs=\"3\" sm=\"2\">\r\n        <div>\r\n          <Tooltip title=\"Edit\" arrow>\r\n            <IconButton size=\"small\" color=\"primary\" \r\n              onClick={()=>{this.handleOpenEditDialog(props)}}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n\r\n          <Tooltip title=\"Delete\" arrow>\r\n            <IconButton size=\"small\" color=\"secondary\"\r\n              onClick={()=>{this.handleOpenDeleteDialog(props)}}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </div>\r\n      </Grid> : null }\r\n    </Grid>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const { classes } = this.props;\r\n    const array = this.state.userWebmons;\r\n    const arrayCount = array.length;\r\n    return(\r\n      <div className={classes.root}>\r\n        <div>\r\n          {!this.state.readOnly ? \r\n          <div className=\" text-right mb-2\">\r\n            <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={()=>{this.setState({openDialog:true})}}>\r\n              Add User <AddIcon fontSize=\"small\"/>\r\n            </Button>\r\n          </div> : null}\r\n\r\n          <Dialog maxWidth=\"sm\" open={this.state.openDialog} onClose={this.handleCloseDialog.bind(this)}>\r\n            <DialogTitle>{this.state.isCreateDialog ? \"Create New User\" : \"Edit User\"}</DialogTitle>\r\n            <DialogContent>\r\n              <form id=\"userForm\" ref={(el) => this.userFormRef = el}>\r\n                <Grid container spacing={2}>\r\n\r\n                  <Grid item xs={12} style={{display: this.state.formErrorMessage ? \"block\" : \"none\"}}>\r\n                    <div className=\"alert alert-danger\">{this.state.formErrorMessage}</div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\" sm=\"6\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"uName\">Name</label>\r\n                      <input  type=\"uName\" className={\"form-control \" + (this.state.inputError.uName ? \"is-invalid\" : \"\")} id=\"uName\" placeholder=\"Name\" name=\"name\" defaultValue={this.state.inputFields.name} />\r\n                      <div style={{display: this.state.inputError.uName ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                        Please provide a valid name.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\" sm=\"6\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"uEmail\">Email</label>\r\n                      <input  type=\"uEmail\" className={\"form-control \" + (this.state.inputError.uEmail ? \"is-invalid\" : \"\")} id=\"uEmail\" placeholder=\"email@example.com\" name=\"email\" defaultValue={this.state.inputFields.email} />\r\n                      <div style={{display: this.state.inputError.uEmail ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                        Please provide an email.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n\r\n              <LinearProgress className=\"mt-3\" style={{display: this.state.dialogProgress ? \"block\":\"none\"}} />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button size=\"small\" variant=\"contained\" onClick={this.handleAddUpdateUser.bind(this)} color=\"primary\">\r\n                {this.state.isCreateDialog ? \"Create\" : \"Update\"}\r\n              </Button>\r\n              <Button variant=\"contained\" size=\"small\" onClick={this.handleCloseDialog.bind(this)} color=\"default\">\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <div className=\"grid-group\">\r\n            <div className=\"grid-header e-grid\">\r\n                <Grid container>\r\n                  <Grid item sm=\"1\" className=\"d-none d-sm-block\">ID</Grid>\r\n                  <Grid item xs=\"7\"sm={this.state.readOnly ? \"4\" : \"3\"}>Name</Grid>\r\n                  <Grid item sm={this.state.readOnly ? \"4\" : \"3\"} className=\"d-none d-sm-block\">Email</Grid>\r\n                  <Grid item xs=\"2\" className=\"d-none d-sm-block\" sm=\"2\">Webmons</Grid>\r\n                  {!this.state.readOnly ? <Grid item xs=\"4\" sm=\"2\">Action</Grid> : null}\r\n                </Grid>\r\n              </div>\r\n            <GridComponent \r\n              id=\"noHeaderGrid\"\r\n              ref={g => (this.grid = g)}\r\n              dataSource={this.state.users}\r\n              allowPaging={true}\r\n              allowSo\r\n              pageSettings={{pageSize: 10}}\r\n              >\r\n              <ColumnsDirective>\r\n                <ColumnDirective template={this.template} />\r\n              </ColumnsDirective>\r\n              <Inject services={[Page]} />\r\n            </GridComponent>\r\n          </div>\r\n          \r\n        </div>\r\n\r\n        <Dialog\r\n          open={this.state.openDeleteDialog}\r\n          onClose={this.handleCloseDeleteDialog.bind(this)}>\r\n          <DialogTitle>{\"Confirm Delete User\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              All owned webmons of this user will also be removed. Are you sure you want to continue?\r\n            </DialogContentText>\r\n          </DialogContent>\r\n\r\n          <LinearProgress className=\"mt-3\" style={{display: this.state.dialogProgressDelete ? \"block\":\"none\"}} />\r\n          <DialogActions>\r\n            <Button size=\"small\" variant=\"contained\" onClick={this.handleCloseDeleteDialog.bind(this)} color=\"default\">\r\n              Cancel\r\n            </Button>\r\n            <Button size=\"small\" variant=\"contained\" onClick={this.handleDeleteUser.bind(this)} color=\"primary\" autoFocus>\r\n              Confirm\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog> \r\n\r\n        <Dialog maxWidth=\"sm\" className={classes.noButtonOutline} open={this.state.openWebmonsDialog} onClose={this.handleCloseWebmonsDialog.bind(this)}>\r\n          <DialogTitle>User Webmons \r\n             {!this.state.readOnly ? \r\n            <IconButton className=\"float-right\" onClick={this.handleOpenAddUmon.bind(this)}>\r\n              <AddCircleOutlineIcon />\r\n            </IconButton> : null }\r\n          </DialogTitle>\r\n          <DialogContent >\r\n          \r\n          {this.state.openAddEditWebmon ? \r\n          <form id=\"userWebmonForm\" ref={(el) => this.webmonFormRef = el} style={{position:\"absolute\",zIndex:\"3\", top:\"14%\",left:\"0\"}}>\r\n            <Card>\r\n              <CardContent>\r\n                <Grid container spacing={1}>\r\n                  <Grid item xs={12} style={{display: this.state.uMonErormErrorMessage ? \"block\" : \"none\"}}>\r\n                    <div className=\"alert alert-danger\">{this.state.uMonErormErrorMessage}</div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"umWebmon\">Webmon</label>\r\n                      <select disabled={!this.state.isAddUserWebmon} id=\"umWebmon\" defaultValue={this.state.inputFields.umWebmon} name=\"webmonId\" className={\"form-control \" + (this.state.inputError.umWebmon ? \"is-invalid\" : \"\")}>\r\n                        <option>Choose...</option>\r\n                        {this.state.webmons.map((item)=>{\r\n                            return <option key={item.key} data-tokens={item.name} value={item.webmonId}>{item.name}</option>\r\n                        })}\r\n                      </select>\r\n                      <div style={{display: this.state.inputError.umWebmon ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                      Please provide appropriate attribute.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\" sm=\"6\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"umName\">Name</label>\r\n                      <input  type=\"text\" className={\"form-control \" + (this.state.inputError.umName ? \"is-invalid\" : \"\")} id=\"umName\" placeholder=\"Name\" name=\"name\" defaultValue={this.state.inputFields.umName} />\r\n                      <div style={{display: this.state.inputError.umName ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                      Please provide a name.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\" sm=\"6\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"umLevel\">Level</label>\r\n                      <input  type=\"number\" className={\"form-control \" + (this.state.inputError.umLevel ? \"is-invalid\" : \"\")} id=\"umLevel\" placeholder=\"Level\" name=\"level\" defaultValue={this.state.inputFields.umLevel} />\r\n                      <div style={{display: this.state.inputError.umLevel ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                        Please provide a level.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\">\r\n                    <LinearProgress className=\"my-3\" style={{display: this.state.dialogProgress ? \"block\":\"none\"}} />\r\n                  </Grid>\r\n\r\n                </Grid>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button className=\"mr-2\" variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.handleAddEditUserWebmon.bind(this)}>\r\n                  {this.state.isAddUserWebmon ? \"Add\" : \"Update\"}</Button>\r\n                <Button variant=\"contained\" color=\"default\" size=\"small\" onClick={this.handleCloseAddEditUserWebmon.bind(this)}>Cancel</Button>\r\n              </CardActions>\r\n            </Card>\r\n            \r\n          </form> : \"\"}\r\n            \r\n\r\n            <Grid container spacing={1}>\r\n              {arrayCount > 0 ? <Grid container spacing={1}>\r\n                {this.state.userWebmons.map((webmon) => {\r\n                  return <Grid key={webmon.key} item xs=\"12\" sm=\"6\">\r\n                      <Card>\r\n                        <CardContent>\r\n                          <Grid container spacing={1}>\r\n                            <Grid xs=\"12\" item>\r\n                              <span className=\"mr-2\" style={{fontSize:\"x-large\"}}>{webmon.name}</span> \r\n                              <span className=\"font-italic\">Lv.{webmon.level}</span>\r\n                            </Grid>\r\n                            <Grid xs=\"12\" item>\r\n                              <span className=\"font-italic\">{webmon.webmon}</span>  \r\n                            </Grid>\r\n                            <Grid xs=\"12\" item>\r\n                              <span style={{color:colorRating(webmon.rating)}}>\r\n                                {webmon.rating}\r\n                              </span>\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              {webmon.type} Species\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              {webmon.attribute} Attribute\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              <AttackIcon className=\"small-icon\"/>&nbsp; {webmon.attack}\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              <HealthIcon className=\"small-icon\"/>&nbsp; {webmon.health}\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              <PhysicalDefIcon className=\"small-icon\"/>&nbsp; {webmon.physicalDefense}\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              <MagicDefIcon className=\"small-icon\"/>&nbsp; {webmon.magicDefense}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </CardContent>\r\n                        {!this.state.readOnly ? \r\n                        <CardActions className={classes.noButtonOutline}>\r\n                          <Button variant=\"text\" color=\"default\" onClick={()=>{this.handleEditUserWebmon(webmon)}}>\r\n                            Edit\r\n                          </Button>\r\n                          <Button variant=\"text\" color=\"secondary\" onClick={()=>{this.handleDeleteUserWebmon(webmon.id)}}>\r\n                            Delete\r\n                          </Button>\r\n                        </CardActions> : null }\r\n                      </Card>\r\n                    </Grid> \r\n                })}\r\n              </Grid> : <div>This User doesn't own any webmons.</div>}\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleCloseWebmonsDialog.bind(this)} color=\"default\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        <Snackbar\r\n          open={this.state.snackBarSuccess}\r\n          autoHideDuration={4000}\r\n          onClose={()=>{this.setState({snackBarSuccess:false})}}\r\n        >\r\n          <MuiAlert elevation={6} variant=\"filled\" onClose={()=>{this.setState({snackBarSuccess:false})}} severity=\"success\">\r\n            {this.state.snackBarMessage} \r\n          </MuiAlert>\r\n        </Snackbar>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(UsersTabs);","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\creator-tabs\\WebmonsTab.jsx",[],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\js\\common.js",["63"],"  \r\n  export function colorRating(rating){\r\n\r\n    switch(rating){\r\n      case 'Myth':\r\n        // return '#000'\r\n        return '#3b0000'\r\n      case 'Legendary':\r\n        return '#FFD500'\r\n      case 'Epic':\r\n        return '#9C27B0'\r\n      case 'Rare':\r\n        return '#3F51B5'\r\n      case 'Uncommon':\r\n        return '#4CAF50'\r\n      case 'Common':\r\n        return '#9E9E9E'\r\n    }\r\n\r\n  };","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\footer\\footer.jsx",[],{"ruleId":"64","severity":1,"message":"65","line":6,"column":8,"nodeType":"66","messageId":"67","endLine":6,"endColumn":9},{"ruleId":"64","severity":1,"message":"68","line":7,"column":8,"nodeType":"66","messageId":"67","endLine":7,"endColumn":14},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"64","severity":1,"message":"73","line":1,"column":26,"nodeType":"66","messageId":"67","endLine":1,"endColumn":32},{"ruleId":"64","severity":1,"message":"74","line":1,"column":34,"nodeType":"66","messageId":"67","endLine":1,"endColumn":40},{"ruleId":"64","severity":1,"message":"75","line":1,"column":42,"nodeType":"66","messageId":"67","endLine":1,"endColumn":47},{"ruleId":"64","severity":1,"message":"76","line":4,"column":8,"nodeType":"66","messageId":"67","endLine":4,"endColumn":14},{"ruleId":"77","severity":1,"message":"78","line":101,"column":11,"nodeType":"79","endLine":101,"endColumn":56},{"ruleId":"80","severity":1,"message":"81","line":133,"column":50,"nodeType":"82","endLine":133,"endColumn":66},{"ruleId":"64","severity":1,"message":"83","line":3,"column":9,"nodeType":"66","messageId":"67","endLine":3,"endColumn":15},{"ruleId":"64","severity":1,"message":"84","line":3,"column":128,"nodeType":"66","messageId":"67","endLine":3,"endColumn":139},{"ruleId":"85","severity":1,"message":"86","line":77,"column":5,"nodeType":"87","messageId":"88","endLine":77,"endColumn":27},{"ruleId":"89","severity":1,"message":"90","line":7,"column":3,"nodeType":"91","messageId":"92","endLine":9,"endColumn":4},{"ruleId":"64","severity":1,"message":"93","line":267,"column":17,"nodeType":"66","messageId":"67","endLine":267,"endColumn":22},{"ruleId":"94","severity":1,"message":"95","line":4,"column":5,"nodeType":"96","messageId":"97","endLine":18,"endColumn":6},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","no-native-reassign",["98"],"no-negated-in-lhs",["99"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Footer' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Button' is defined but never used.","'CardActions' is defined but never used.","no-dupe-keys","Duplicate key '& .MuiTabs-indicator'.","ObjectExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'error' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]