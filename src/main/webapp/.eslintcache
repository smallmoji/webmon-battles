[{"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\index.js":"1","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\App.js":"2","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\login\\Login.jsx":"3","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\AppRouter.jsx":"4","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\Home.jsx":"5","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\common\\TabPanel.js":"6","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\creator-tabs\\UsersTab.jsx":"7","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\creator-tabs\\WebmonsTab.jsx":"8","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\js\\common.js":"9","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\footer\\footer.jsx":"10"},{"size":371,"mtime":1608724366781,"results":"11","hashOfConfig":"12"},{"size":603,"mtime":1609915673174,"results":"13","hashOfConfig":"12"},{"size":4950,"mtime":1611574521928,"results":"14","hashOfConfig":"12"},{"size":496,"mtime":1608786013877,"results":"15","hashOfConfig":"12"},{"size":21158,"mtime":1610175877081,"results":"16","hashOfConfig":"12"},{"size":710,"mtime":1609915561436,"results":"17","hashOfConfig":"12"},{"size":25212,"mtime":1609989501304,"results":"18","hashOfConfig":"12"},{"size":21445,"mtime":1609989815561,"results":"19","hashOfConfig":"12"},{"size":393,"mtime":1609916471353,"results":"20","hashOfConfig":"12"},{"size":333,"mtime":1609802616980,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"1y5lcrj",{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"25"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\index.js",["49","50"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["51","52"],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\App.js",["53","54","55","56"],"import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport React from 'react';\r\nimport AppRouter from './components/AppRouter';\r\nimport Footer from './components/footer/footer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <div>\r\n         <div className=\"main\" style={{minHeight:\"100vh\"}}>\r\n          <AppRouter/>\r\n        </div>\r\n        {/* <div>\r\n          <Footer />\r\n        </div> */}\r\n        \r\n      </div>\r\n     \r\n    </React.Fragment>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\login\\Login.jsx",["57","58","59","60","61"],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\AppRouter.jsx",[],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\Home.jsx",["62","63","64"],"import React from \"react\";\r\nimport $ from 'jquery';\r\nimport {Button, Paper, Tabs, Tab, AppBar, Toolbar, Typography, IconButton, Grid, Avatar, Badge, CardHeader, Card, CardContent, CardActions, Hidden, Drawer, Menu, MenuItem  } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AdbIcon from '@material-ui/icons/Adb';\r\nimport {ReactComponent as WebmonLogo} from '../../misc/icons/webmon_logo.svg';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport TabPanel from '../common/TabPanel';\r\nimport UsersTab from './creator-tabs/UsersTab';\r\nimport WebmonsTab from './creator-tabs/WebmonsTab';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport ExploreIcon from '@material-ui/icons/Explore';\r\nimport StorefrontIcon from '@material-ui/icons/Storefront';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ReactComponent as AttackIcon} from '../../misc/icons/attack_dmg.svg';\r\nimport {ReactComponent as HealthIcon} from '../../misc/icons/health_icon.svg';\r\nimport {ReactComponent as PhysicalDefIcon} from '../../misc/icons/physical_def_icon.svg';\r\nimport {ReactComponent as MagicDefIcon} from '../../misc/icons/magic_def_icon.svg';\r\nimport {ReactComponent as DiamondBadge} from '../../misc/icons/badge_icons/diamond_badge.svg';\r\nimport {ReactComponent as AchievementsIcon} from '../../misc/icons/achievements_icon.svg';\r\nimport { Link } from 'react-router-dom';\r\nimport { colorRating } from  '../../js/common';\r\nimport '../../css/common.css';\r\nimport '../../css/override-ej2.css';\r\nimport '../../css/home/home.css';\r\nimport avatar from '../../misc/images/angery.jpg';\r\n\r\nconst styles = theme => ({\r\n  noButtonOutline: {\r\n  '& button:focus': {\r\n    outline:'none'\r\n    }\r\n  },\r\n  tabStyle: {\r\n    '& button:focus': {\r\n      outline:'none'\r\n    },\r\n    '& .Mui-selected' : {\r\n      color: '#fb8e27'\r\n    },\r\n    '& .MuiTabs-indicator' : {\r\n      backgroundColor: '#fb8e27'\r\n    }\r\n  },\r\n  sidebarTab: {\r\n    '& button:focus': {\r\n      outline:'none'\r\n    },\r\n    '& .MuiTab-wrapper' : {\r\n      alignItems:\"flex-start\"\r\n    },\r\n    '& .MuiTab-root': {\r\n      padding: \"0\",\r\n      fontSize: \"0.775rem\",\r\n      minHeight: \"35px\",\r\n      paddingLeft:\"16px\"\r\n    },\r\n    '& .Mui-selected' : {\r\n      color: '#e9e9e9',\r\n      fontWeight: '500!important',\r\n      backgroundColor: \"#2d343f\",\r\n      '& .MuiSvgIcon-root': {\r\n        color: '#fb8e27'\r\n      }\r\n    },\r\n    '& .MuiTabs-indicator' : {\r\n      backgroundColor: '#fff'\r\n    },\r\n    '& .MuiTab-textColorInherit': {\r\n      color: '#e9e9e9',\r\n      fontWeight: '400'\r\n    },\r\n    '& .MuiTabs-indicator' : {\r\n      backgroundColor: '#fb8e27'\r\n    }\r\n  },\r\n  smallAvatar: {\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n  },  \r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  drawer: {\r\n    '& .MuiPaper-root':{\r\n      width:\"50%\"\r\n    }\r\n  },\r\n  profileAvatar: {\r\n    '& *': {\r\n      position:\"absolute\",\r\n      top:\"0\"\r\n    },\r\n    width: \"100%\",\r\n    paddingTop: \"100%\",\r\n    position: \"relative\",\r\n  }\r\n});\r\n\r\nclass Home extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    const prop = this.props.location.state;\r\n    document.title = \"Home\";\r\n    this.state = {\r\n      role: prop.role,\r\n      id: prop.id,\r\n      userName:\"\",\r\n      value: 0,\r\n      sidebarValue: 20,\r\n      skillsCount: 0,\r\n      usersCount: 0,\r\n      webmonsCount: 0,\r\n      page:\"Dashboard\",\r\n      mobileOpen: false,\r\n      profileMenuEl: null,\r\n      userWebmons: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getEntitiesCount();\r\n    this.getCurrentUser();\r\n    this.getUserWebmons(this.state.id);\r\n  }\r\n\r\n  getUserWebmons(id){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getScaledUserWebmons\",\r\n      data:{\r\n        userId: id\r\n      },\r\n      type: \"GET\",\r\n      success: function(response){\r\n        if(response.result === \"sucess\"){\r\n          that.setState({userWebmons: response.scaledUserWebmons})\r\n        }\r\n      },\r\n      error: function(error){\r\n        console.log(error);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  getCurrentUser(){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getUser\",\r\n      data: {\r\n        userId: that.state.id\r\n      },\r\n      type:\"GET\",\r\n      success:function(response){\r\n        if(response.result === \"success\"){\r\n          that.setState({userName: response.user.name})\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  getEntitiesCount(){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getEntitiesCount\",\r\n      type:\"GET\",\r\n      success:function(response){\r\n        if(response.result === \"success\"){\r\n          that.setState({skillsCount: response.skillsCount, usersCount: response.usersCount, webmonsCount: response.webmonsCount})\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  handleDrawerToggle(){\r\n    let toggler = this.state.mobileOpen;\r\n    console.log(!toggler)\r\n    this.setState({mobileOpen: !toggler})\r\n  }\r\n\r\n  handleChange(e, newValue){\r\n    this.setState({value: newValue})\r\n  }\r\n\r\n  handleSidebarChange(e, newValue){\r\n    let pageText = e.target.innerText;\r\n    let formattedPageText = pageText.charAt(1) + pageText.slice(2).toLowerCase();\r\n    this.setState({sidebarValue: newValue, page: formattedPageText});\r\n  }\r\n\r\n  renderSidebar(){\r\n    const { classes } = this.props;\r\n    if(this.state.role === \"creator\"){\r\n      return(\r\n      <div className=\"profile-bar\">\r\n        <Grid item>\r\n          <Grid item xs={12}>\r\n            <div className=\"d-flex align-items-center mb-3 pl-3 pt-3\">\r\n              <WebmonLogo className=\"small-icon mr-1\"/> <span className=\"logo-word\">Webmons</span> \r\n            </div>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} className=\"pl-3 mb-2 text-secondary\">Main</Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Tabs\r\n              orientation=\"vertical\"\r\n              className={classes.sidebarTab}\r\n              value={this.state.sidebarValue}\r\n              onChange={this.handleSidebarChange.bind(this)}\r\n              indicatorColor=\"inherit\"\r\n            >\r\n              <Tab value={20} label={<div><DashboardIcon style={{verticalAlign: 'middle'}} /> Dashboard</div>} aria-label=\"dashboard\" />\r\n              <Tab value={21} label={<div><PersonPinIcon style={{verticalAlign: 'middle'}} /> Users</div>} aria-label=\"users\" />\r\n              <Tab value={22} label={<div><AdbIcon style={{verticalAlign: 'middle'}} /> Webmons</div>} aria-label=\"webmon\" />\r\n              <Tab value={23} label={<div><MenuBookIcon style={{verticalAlign: 'middle'}} /> Skills</div>} aria-label=\"skills\" />\r\n            </Tabs>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} className=\"pl-3 my-2 text-secondary\">Misc</Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Tabs\r\n              orientation=\"vertical\"\r\n              className={classes.sidebarTab}\r\n              value={this.state.sidebarValue < 29 ? false : this.state.sidebarValue }\r\n              onChange={this.handleSidebarChange.bind(this)}\r\n              indicatorColor=\"inherit\"\r\n            >\r\n              <Tab value={30} label={<div><PublicIcon style={{verticalAlign: 'middle'}} /> World</div>} aria-label=\"dashboard\" />\r\n              <Tab value={31} label={<div><ExploreIcon style={{verticalAlign: 'middle'}} /> Exploration</div>} aria-label=\"users\" />\r\n              <Tab value={32} label={<div><StorefrontIcon style={{verticalAlign: 'middle'}} /> Store</div>} aria-label=\"users\" />\r\n            </Tabs>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <div className=\"d-flex align-items-center w-100 p-2\" style={{borderTop:\"1px solid #525b65\"}}>\r\n          <div><Avatar className={classes.smallAvatar} /></div>\r\n          <div className=\"ml-3 d-flex flex-column\">\r\n            <span className=\"text-white\">{this.state.userName}</span> \r\n            <div className=\"d-flex align-items-center\" style={{fontSize:\"12px\"}}>\r\n              <div className=\"mr-2 rounded bg-success\" style={{width:\"8px\",height:\"8px\"}}></div>\r\n              <span style={{color:\"#c3c3c3\"}}>online</span></div>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>)    \r\n    }else{\r\n      return(\r\n      <div className=\"profile-bar\">\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <div className=\"d-flex align-items-center mb-3 pl-3 pt-3\">\r\n              <WebmonLogo className=\"small-icon mr-1\"/> <span className=\"logo-word\">Webmons</span> \r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} className=\"pl-3 mb-2 text-secondary\">Main</Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Tabs\r\n              orientation=\"vertical\"\r\n              className={classes.sidebarTab}\r\n              value={this.state.sidebarValue}\r\n              onChange={this.handleSidebarChange.bind(this)}\r\n              indicatorColor=\"inherit\"\r\n            >\r\n              <Tab value={20} label={<div><DashboardIcon style={{verticalAlign: 'middle'}} /> Dashboard</div>} aria-label=\"dashboard\" />\r\n              <Tab value={21} label={<div><AdbIcon style={{verticalAlign: 'middle'}} /> Webmons</div>} aria-label=\"webmon\" />\r\n            </Tabs>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} className=\"pl-3 my-2 text-secondary\">Misc</Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Tabs\r\n              orientation=\"vertical\"\r\n              className={classes.sidebarTab}\r\n              value={this.state.sidebarValue < 29 ? false : this.state.sidebarValue }\r\n              onChange={this.handleSidebarChange.bind(this)}\r\n              indicatorColor=\"inherit\"\r\n            >\r\n              <Tab value={30} label={<div><PublicIcon style={{verticalAlign: 'middle'}} /> World</div>} aria-label=\"dashboard\" />\r\n              <Tab value={31} label={<div><ExploreIcon style={{verticalAlign: 'middle'}} /> Exploration</div>} aria-label=\"users\" />\r\n              <Tab value={32} label={<div><StorefrontIcon style={{verticalAlign: 'middle'}} /> Store</div>} aria-label=\"users\" />\r\n            </Tabs>\r\n          </Grid>\r\n        </Grid>\r\n        \r\n        \r\n        <div className=\"d-flex align-items-center w-100 p-2\" style={{borderTop:\"1px solid #525b65\"}}>\r\n          <div><Avatar className={classes.smallAvatar} /></div>\r\n          <div className=\"ml-3 d-flex flex-column\">\r\n            <span className=\"text-white\">{this.state.userName}</span> \r\n            <div className=\"d-flex align-items-center\" style={{fontSize:\"12px\"}}>\r\n              <div className=\"mr-2 rounded bg-success\" style={{width:\"8px\",height:\"8px\"}}></div>\r\n              <span style={{color:\"#c3c3c3\"}}>online</span></div>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>)  \r\n    }\r\n  }\r\n\r\n  renderUserPanels(){\r\n    const { classes } = this.props;\r\n    const array = this.state.userWebmons;\r\n    const arrayCount = array.length;\r\n\r\n    return(\r\n      <React.Fragment>\r\n        <TabPanel value={this.state.sidebarValue} index={20}>\r\n          <Grid container spacing={2}>\r\n            <Grid item sm=\"3\">\r\n              <Paper className=\"p-3 text-center\">\r\n                <Avatar src={avatar} className={classes.profileAvatar}></Avatar>\r\n\r\n                <Typography className=\"d-flex justify-content-center align-items-center mt-2\" variant=\"h5\" color=\"initial\">{this.state.userName} <DiamondBadge className=\"small-icon ml-2\" /></Typography>\r\n\r\n                <Typography variant=\"subtitle1\" color=\"initial\">level 25</Typography>\r\n\r\n                <Typography variant=\"subtitle1\" color=\"initial\">Achievements</Typography>\r\n\r\n                <Paper elevation={3} className=\"p-1 d-flex bg-primary text-white align-items-center\"><AchievementsIcon className=\"small-icon mr-2\" /> <Typography variant=\"subtitle1\" color=\"initial\">1 vs 1000</Typography></Paper>\r\n\r\n                <Paper elevation={3} className=\"mt-1 p-1 d-flex bg-primary text-white align-items-center\"><AchievementsIcon className=\"small-icon mr-2\" /> <Typography variant=\"subtitle1\" color=\"initial\">Dragon Slayer</Typography></Paper>\r\n\r\n                <Paper elevation={3} className=\"mt-1 p-1 d-flex bg-success text-white align-items-center\"><AchievementsIcon className=\"small-icon mr-2\" /> <Typography variant=\"subtitle1\" color=\"initial\">First foot on the moon</Typography></Paper>    \r\n              </Paper>\r\n            </Grid>\r\n\r\n            <Grid item sm=\"9\">\r\n               {/* <Paper className=\"p-3\"> */}\r\n                <Typography variant=\"h5\" color=\"initial\">My Webmons</Typography>\r\n                {arrayCount > 0 ? <Grid container spacing={1}>\r\n                  {this.state.userWebmons.map((webmon) => {\r\n                    return <Grid key={webmon.key} item>\r\n                        <Card style={{width:\"250px\",fontSize:\"small\"}}>\r\n                          <CardContent>\r\n                            <Grid container spacing={1}>\r\n                              <Grid xs=\"12\" item>\r\n                                <span className=\"mr-2\" style={{fontSize:\"x-large\"}}>{webmon.name}</span> \r\n                                <span className=\"font-italic\">Lv.{webmon.level}</span>\r\n                              </Grid>\r\n                              <Grid xs=\"12\" item>\r\n                                <span className=\"font-italic\">{webmon.webmon}</span>  \r\n                              </Grid>\r\n                              <Grid xs=\"12\" item>\r\n                                <span style={{color:colorRating(webmon.rating)}}>\r\n                                  {webmon.rating}\r\n                                </span>\r\n                              </Grid>\r\n                              <Grid xs=\"12\" sm=\"6\" item>\r\n                                {webmon.type} Species\r\n                              </Grid>\r\n                              <Grid xs=\"12\" sm=\"6\" item>\r\n                                {webmon.attribute} Attribute\r\n                              </Grid>\r\n                              <Grid xs=\"12\" sm=\"6\" item>\r\n                                <AttackIcon className=\"small-icon\"/>&nbsp; {webmon.attack}\r\n                              </Grid>\r\n                              <Grid xs=\"12\" sm=\"6\" item>\r\n                                <HealthIcon className=\"small-icon\"/>&nbsp; {webmon.health}\r\n                              </Grid>\r\n                              <Grid xs=\"12\" sm=\"6\" item>\r\n                                <PhysicalDefIcon className=\"small-icon\"/>&nbsp; {webmon.physicalDefense}\r\n                              </Grid>\r\n                              <Grid xs=\"12\" sm=\"6\" item>\r\n                                <MagicDefIcon className=\"small-icon\"/>&nbsp; {webmon.magicDefense}\r\n                              </Grid>\r\n                            </Grid>\r\n                          </CardContent>\r\n                        </Card>\r\n                      </Grid> \r\n                  })}\r\n                </Grid> : <div>This User doesn't own any webmons.</div>}\r\n              {/* </Paper> */}\r\n            </Grid>\r\n          </Grid>\r\n        </TabPanel>\r\n\r\n        <TabPanel value={this.state.sidebarValue} index={21}>\r\n         \r\n        </TabPanel>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  renderCreatorPanels(){\r\n    const { classes } = this.props;\r\n\r\n    return(\r\n      <React.Fragment>\r\n        <TabPanel value={this.state.sidebarValue} index={20}>\r\n          <Grid container spacing={2} className=\"p-2\">\r\n            <Grid item xs={12} sm=\"4\">\r\n              <Card>\r\n                <CardHeader avatar={<Avatar aria-label=\"\" style={{backgroundColor:\"#86A59C\"}}></Avatar>}\r\n                title={<div><span style={{fontSize:\"1.2rem\"}}>{this.state.usersCount}</span> Users</div>}/>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm=\"4\">\r\n              <Card>\r\n                <CardHeader avatar={<Avatar style={{backgroundColor:\"#89CE94\"}}><AdbIcon/></Avatar>}\r\n                title={<div><span style={{fontSize:\"1.2rem\"}}>{this.state.webmonsCount}</span> Webmons</div>}/>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm=\"4\">\r\n              <Card>\r\n                <CardHeader avatar={<Avatar style={{backgroundColor:\"#DABFFF\"}}><MenuBookIcon/></Avatar>}\r\n                title={<div><span style={{fontSize:\"1.2rem\"}}>{this.state.skillsCount}</span> Skills</div>}/>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <Paper square className=\"p-2\">\r\n                <Tabs\r\n                  className={classes.tabStyle}\r\n                  value={this.state.value}\r\n                  onChange={this.handleChange.bind(this)}\r\n                >\r\n                  <Tab label={<div><PersonPinIcon style={{verticalAlign: 'middle'}} /> Users</div>} aria-label=\"users\" />\r\n                  <Tab label={<div><AdbIcon style={{verticalAlign: 'middle'}} /> Webmons</div>} aria-label=\"webmon\" />\r\n                  <Tab label={<div><MenuBookIcon style={{verticalAlign: 'middle'}} /> Skills</div>} aria-label=\"skills\" />\r\n                </Tabs>\r\n\r\n                <TabPanel value={this.state.value} index={0}>\r\n                  <UsersTab isShow={true} />\r\n                </TabPanel>\r\n                <TabPanel value={this.state.value} index={1}>\r\n                  <WebmonsTab isShow={true} />\r\n                </TabPanel>\r\n                <TabPanel value={this.state.value} index={2}>\r\n                  Item Three\r\n                </TabPanel>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </TabPanel>\r\n        <TabPanel value={this.state.sidebarValue} index={21}>\r\n          <Paper className=\"p-3\">\r\n            <UsersTab isShow={false} />\r\n          </Paper>\r\n        </TabPanel>\r\n        <TabPanel value={this.state.sidebarValue} index={22}>\r\n          <Paper>\r\n            <WebmonsTab isShow={false} />\r\n          </Paper>\r\n        </TabPanel>\r\n        <TabPanel value={this.state.sidebarValue} index={23}>\r\n          SKILLS\r\n        </TabPanel>\r\n\r\n        <TabPanel value={this.state.sidebarValue} index={30}>\r\n          World\r\n        </TabPanel>\r\n\r\n        <TabPanel value={this.state.sidebarValue} index={31}>\r\n          Exploration\r\n        </TabPanel>\r\n\r\n        <TabPanel value={this.state.sidebarValue} index={32}>\r\n          Store\r\n        </TabPanel>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n  render(){\r\n    const { classes } = this.props;\r\n    return(\r\n      <div>\r\n          <Grid container style={{height:\"100vh\"}}>\r\n            <Grid item xs={12} sm={2} className=\"p-0\">\r\n              <Hidden className=\"h-100\" xsDown implementation=\"css\">\r\n                {this.renderSidebar()}\r\n              </Hidden>\r\n              <Hidden smUp implementation=\"css\">\r\n                <Drawer\r\n                  className={classes.drawer}\r\n                  variant=\"temporary\"\r\n                  open={this.state.mobileOpen}\r\n                  onClose={this.handleDrawerToggle.bind(this)}\r\n                  ModalProps={{\r\n                    keepMounted: true\r\n                  }}\r\n                >\r\n                   {this.renderSidebar()}\r\n                </Drawer>\r\n              </Hidden>\r\n              \r\n            </Grid>\r\n            <Grid className={classes.noButtonOutline} style={{maxHeight:\"100vh\",overflowY:\"auto\"}} item xs={12} sm=\"10\">\r\n               <AppBar position=\"sticky\" className=\"border-bottom\" style={{backgroundColor:\"#fff\",boxShadow:\"none\"}}>\r\n                <Toolbar>\r\n                  <IconButton\r\n                    color=\"default\"\r\n                    aria-label=\"open drawer\"\r\n                    edge=\"start\"\r\n                    onClick={this.handleDrawerToggle.bind(this)}\r\n                    className={classes.menuButton}\r\n                  >\r\n                    <MenuIcon />\r\n                  </IconButton>\r\n                  <Typography variant=\"h6\" color=\"textPrimary\" style={{flexGrow:\"1\"}}>\r\n                    {this.state.page}\r\n                  </Typography>\r\n\r\n                  <IconButton aria-label=\"show 17 new notifications\" color=\"default\">\r\n                    <Badge badgeContent={17} color=\"secondary\">\r\n                      <NotificationsIcon />\r\n                    </Badge>\r\n                  </IconButton>\r\n                  <IconButton color=\"default\" onClick={(e)=>{this.setState({profileMenuEl: e.target})}}>\r\n                    <AccountCircle />\r\n                  </IconButton>\r\n                </Toolbar>\r\n              </AppBar>\r\n\r\n              <Menu\r\n                anchorEl={this.state.profileMenuEl}\r\n                keepMounted\r\n                open={Boolean(this.state.profileMenuEl)}\r\n                onClose={()=>{this.setState({profileMenuEl:null})}}\r\n              >\r\n                <MenuItem><Link to=\"/login\">Logout</Link></MenuItem>\r\n              </Menu>\r\n\r\n              {this.state.role === \"creator\" ? this.renderCreatorPanels() : this.renderUserPanels()}\r\n\r\n              \r\n            </Grid>\r\n          </Grid>\r\n\r\n      </div>\r\n  \r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Home);","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\common\\TabPanel.js",["65"],"import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nexport default class TabPanel extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  \r\n  render(){\r\n    const { children, value, index, ...other } = this.props;\r\n    return (\r\n        <div\r\n          role=\"tabpanel\"\r\n          hidden={value !== index}\r\n          id={`simple-tabpanel-${index}`}\r\n          aria-labelledby={`simple-tab-${index}`}\r\n          {...other}\r\n        >\r\n          {value === index && (\r\n            <Box p={3}>\r\n              <Typography>{children}</Typography>\r\n            </Box>\r\n          )}\r\n        </div>\r\n      );\r\n  }\r\n  \r\n}","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\creator-tabs\\UsersTab.jsx",["66"],"import React from 'react';\r\nimport $ from 'jquery';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { ColumnDirective, ColumnsDirective, GridComponent, Inject, Page } from '@syncfusion/ej2-react-grids';\r\nimport { \r\n  Button, \r\n  Grid, LinearProgress, Card , CardContent, CardActions,\r\n  Dialog, DialogActions, DialogContent, DialogContentText,DialogTitle, Snackbar, IconButton, Tooltip\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport {ReactComponent as AttackIcon} from '../../../misc/icons/attack_dmg.svg';\r\nimport {ReactComponent as HealthIcon} from '../../../misc/icons/health_icon.svg';\r\nimport {ReactComponent as PhysicalDefIcon} from '../../../misc/icons/physical_def_icon.svg';\r\nimport {ReactComponent as MagicDefIcon} from '../../../misc/icons/magic_def_icon.svg';\r\nimport \"../../../css/common.css\";\r\nimport \"../../../css/override-ej2.css\";\r\nimport { colorRating } from  '../../../js/common';\r\n\r\nconst styles = theme => ({\r\n  noButtonOutline: {\r\n    '& button:focus': {\r\n      outline:'none'\r\n    }\r\n  }\r\n});\r\nclass UsersTabs extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      readOnly: this.props.isShow,  \r\n      users:[],\r\n      webmons:[],\r\n      userWebmons:[],\r\n      openDialog: false,\r\n      openWebmonsDialog: false,\r\n      openDeleteDialog: false,\r\n      isCreateDialog: true,\r\n      isAddUserWebmon:true,\r\n      formErrorMessage: \"\",\r\n      uMonErormErrorMessage:\"\",\r\n      dialogProgress: false,\r\n      dialogProgressDelete: false,\r\n      snackBarSuccess:false,\r\n      snackBarMessage:\"\",\r\n      userToDelete: \"\",\r\n      webmonsUser: null,\r\n      openAddEditWebmon: false,\r\n      inputFields:{\r\n        userId: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        umWebmon: \"\",\r\n        umName: \"\",\r\n        umId:\"\",\r\n        umLevel:\"\"\r\n      },\r\n      inputError:{\r\n        uName: false,\r\n        uEmail: false,\r\n        umWebmon: false,\r\n        umName: \"\"\r\n        \r\n      }\r\n    }\r\n\r\n    this.grid = null;\r\n    this.template = this.gridTemplate.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getUsers();\r\n    this.getWebmons();\r\n  }\r\n\r\n  getUsers(){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getUsers\",\r\n      type: \"GET\",\r\n      success: function(response){\r\n        if(response.result === \"success\"){\r\n          that.setState({users: response.users})\r\n        }\r\n      },\r\n      error: function(error){\r\n        console.log(error);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  getWebmons(){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getWebmons\",\r\n      type: \"GET\",\r\n      success: function(response){\r\n        if(response.result === \"success\"){\r\n          that.setState({webmons: response.webmons})\r\n        }\r\n      },\r\n      error: function(error){\r\n        console.log(error);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  getUserWebmons(id){\r\n    let that = this;\r\n    $.ajax({\r\n      url:\"getScaledUserWebmons\",\r\n      data:{\r\n        userId: id\r\n      },\r\n      type: \"GET\",\r\n      success: function(response){\r\n        if(response.result === \"sucess\"){\r\n          that.setState({userWebmons: response.scaledUserWebmons})\r\n        }\r\n      },\r\n      error: function(error){\r\n        console.log(error);\r\n      }\r\n\r\n    });\r\n  }\r\n  \r\n  handleCloseDialog(){\r\n    this.setState({openDialog:false, formErrorMessage:\"\",isCreateDialog:true,\r\n    inputError:{\r\n      uName: false,\r\n      uEmail: false },\r\n    inputFields:{\r\n      userId: \"\",\r\n      name: \"\",\r\n      email: \"\",}})\r\n    this.userFormRef.reset();\r\n  }\r\n\r\n  handleAddUpdateUser(){\r\n    const that = this;\r\n    let formData = new FormData(document.getElementById(\"userForm\"));\r\n    let isError = false;\r\n    let errorFields = {};\r\n    let errorState = {};\r\n    let url = \"\";\r\n    for(let pair of formData.entries()){\r\n      if(!pair[1]){\r\n        errorFields[`u${pair[0].charAt(0).toUpperCase() + pair[0].slice(1)}`] = true;\r\n        isError = true;\r\n      }else{\r\n        errorFields[`u${pair[0].charAt(0).toUpperCase() + pair[0].slice(1)}`] = false;\r\n      }\r\n    }\r\n\r\n    errorState['inputError'] = errorFields;\r\n    if(isError){\r\n      this.setState(errorState)\r\n      this.setState({formErrorMessage: \"\"});\r\n    }else{\r\n\r\n      if(this.state.isCreateDialog){\r\n        url = \"createUser\";\r\n      }else{\r\n        url = \"updateUser\"\r\n        formData.append(\"userId\",this.state.inputFields.userId)\r\n      }\r\n      this.setState({dialogProgress:true})\r\n       $.ajax({\r\n        url: url,\r\n        data: formData,\r\n        type: 'POST',\r\n        processData: false,\r\n        contentType:false,\r\n        success: function(response){\r\n          if(response.result === \"success\"){\r\n            that.getUsers();\r\n            that.setState({snackBarSuccess:true, dialogProgress:false})\r\n\r\n            if(that.state.isCreateDialog){\r\n              that.setState({snackBarMessage:\"User successfully created!\"})\r\n            }else{\r\n              that.setState({snackBarMessage:\"User successfully updated!\"})\r\n            }\r\n\r\n            that.grid.refresh();\r\n            that.handleCloseDialog();\r\n          }else{\r\n            that.setState({dialogProgress:false})\r\n            let error = response.error;\r\n            if(error.includes(\"Validation failed for classes [com.wb.web.model.User]\")){\r\n              that.setState({formErrorMessage: \"Invalid Email Address\"});    \r\n            }else{\r\n              that.setState({formErrorMessage: response.error});\r\n            }\r\n            \r\n          }\r\n        },\r\n        error: function(xhr){\r\n          const errorMessage = xhr.responseJSON.status + \" \" + xhr.responseJSON.error;\r\n          that.setState({formErrorMessage: errorMessage, dialogProgress:false});\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleAddEditUserWebmon(){\r\n    const that = this;\r\n    let formData = new FormData(document.getElementById(\"userWebmonForm\"));\r\n    let isError = false;\r\n    let errorFields = {};\r\n    let errorState = {};\r\n    let url = \"\";\r\n\r\n     for(let pair of formData.entries()){\r\n      if(!pair[1]){\r\n        errorFields[`um${pair[0].charAt(0).toUpperCase() + pair[0].slice(1)}`] = true;\r\n        isError = true;\r\n      }else{\r\n        errorFields[`um${pair[0].charAt(0).toUpperCase() + pair[0].slice(1)}`] = false;\r\n      }\r\n    }\r\n\r\n    errorState['inputError'] = errorFields;\r\n    if(isError){\r\n      this.setState(errorState)\r\n      this.setState({uMonErormErrorMessage: \"\"});\r\n    }else{\r\n\r\n\r\n      if(this.state.isAddUserWebmon){\r\n        url = \"createUserWebmon\";\r\n        formData.append(\"userId\",this.state.webmonsUser); \r\n      }else{\r\n        url = \"updateUserWebmon\"\r\n        formData.append(\"userWebmonId\",this.state.inputFields.umId);\r\n      }\r\n\r\n      this.setState({dialogProgress:true})\r\n       $.ajax({\r\n        url: url,\r\n        data: formData,\r\n        type: 'POST',\r\n        processData: false,\r\n        contentType:false,\r\n        success: function(response){\r\n          if(response.result === \"success\"){\r\n            ;\r\n            that.setState({snackBarSuccess:true, dialogProgress:false})\r\n            that.getUserWebmons(that.state.webmonsUser)\r\n            if(that.state.isAddUserWebmon){\r\n              that.setState({snackBarMessage:\"Webmon successfully added!\"});\r\n            }else{\r\n              that.setState({snackBarMessage:\"Webmon successfully updated!\"})\r\n            }\r\n\r\n            that.grid.refresh();\r\n            that.handleCloseAddEditUserWebmon();\r\n          }else{\r\n            that.setState({dialogProgress:false})\r\n            let error = response.error;\r\n            \r\n          }\r\n        },\r\n        error: function(xhr){\r\n          const errorMessage = xhr.responseJSON.status + \" \" + xhr.responseJSON.error;\r\n          that.setState({formErrorMessage: errorMessage, dialogProgress:false});\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  handleOpenAddUmon(){\r\n    this.setState({openAddEditWebmon:true, isAddUserWebmon:true})\r\n  }\r\n\r\n  handleOpenEditUmon(){\r\n    this.setState({openAddEditWebmon:true, isAddUserWebmon:false})\r\n  }\r\n\r\n  handleCloseAddEditUserWebmon(){\r\n    this.setState({openAddEditWebmon:false, inputFields:{\r\n        userId: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        umWebmon: \"\",\r\n        umName: \"\",\r\n        umId:\"\",\r\n        umLevel:\"\"\r\n      },\r\n      inputError:{\r\n        uName: false,\r\n        uEmail: false,\r\n        umWebmon: false,\r\n        umName: \"\"\r\n        \r\n      }})\r\n  }\r\n\r\n  handleDeleteUser(){\r\n    const that = this;\r\n    $.ajax({\r\n      url: \"deleteUser\",\r\n      data: {\r\n        userId: this.state.userToDelete\r\n      },\r\n      type: 'DELETE',\r\n      success: function(response){\r\n        if(response.result === \"success\"){\r\n          that.getUsers();\r\n          that.grid.refresh();\r\n          that.handleCloseDeleteDialog();\r\n          that.setState({snackBarSuccess: true, snackBarMessage:\"User successfully deleted!\"})\r\n        }\r\n      },\r\n      error: function(xhr){\r\n          const errorMessage = xhr.responseJSON.status + \" \" + xhr.responseJSON.error;\r\n          that.setState({formErrorMessage: errorMessage, dialogProgress:false});\r\n      }\r\n    })\r\n  }\r\n\r\n  handleOpenEditDialog(props){\r\n    let state = {};\r\n    let inputField = {};\r\n    inputField['userId'] = props.id;\r\n    inputField['name'] = props.name;\r\n    inputField['email'] = props.email;\r\n    state['inputFields'] = inputField;\r\n    state['isCreateDialog'] = false;\r\n    state['openDialog'] = true;\r\n    this.setState(state);\r\n    \r\n  }\r\n\r\n  handleOpenWebmonsDialog(props){\r\n    this.setState({webmonsUser: props.id, openWebmonsDialog:true});\r\n    this.getUserWebmons(props.id);\r\n    \r\n  }\r\n  \r\n  handleOpenDeleteDialog(props){\r\n    this.setState({openDeleteDialog:true, userToDelete: props.id})\r\n  }\r\n\r\n  handleCloseDeleteDialog(){\r\n    this.setState({formErrorMessage:\"\",openDeleteDialog:false, userToDelete:0, dialogProgressDelete:false})\r\n  }\r\n\r\n  handleCloseWebmonsDialog(){\r\n    this.setState({openWebmonsDialog:false, webmonsUser: null, userWebmons:[]});\r\n    this.handleCloseAddEditUserWebmon();\r\n  }\r\n  \r\n  handleDeleteUserWebmon(id){\r\n    const that = this;\r\n    $.ajax({\r\n      url: \"deleteUserWebmon\",\r\n      data: {userId: this.state.webmonsUser, userWebmonId: id},\r\n      type: \"DELETE\",\r\n      success: function(response){\r\n        if(response.result === \"success\"){\r\n          that.getUserWebmons(that.state.webmonsUser);\r\n          that.setState({snackBarSuccess:true, snackBarMessage:\"Webmon successfully deleted!\"});\r\n        }\r\n      },\r\n      error: function(xhr){\r\n\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  handleEditUserWebmon(webmon){\r\n    let state = {};\r\n    let inputField = {};\r\n    inputField['umWebmon'] = webmon.webmonId;\r\n    inputField['umName'] = webmon.name;\r\n    inputField['umLevel'] = webmon.level;\r\n    inputField['umId'] = webmon.id;\r\n    state['inputFields'] = inputField;\r\n    state['isAddUserWebmon'] = false;\r\n    this.setState(state);\r\n\r\n    this.handleOpenEditUmon();\r\n\r\n    \r\n  }\r\n\r\n  gridTemplate(props) {\r\n  const { classes } = this.props;\r\n  return (\r\n    <Grid container className={classes.templateGrid}>\r\n      <Grid item sm=\"1\" className=\"d-none d-sm-block\">{props.id}</Grid>\r\n      <Grid item xs=\"7\" sm={this.state.readOnly ? \"4\" : \"3\"}>{props.name}</Grid>\r\n      <Grid item sm={this.state.readOnly ? \"4\" : \"3\"} className=\"d-none d-sm-block\">{props.email}</Grid>\r\n      <Grid item xs=\"2\" sm=\"2\" >\r\n        <Tooltip title=\"Show owned webmons\" arrow>\r\n            <IconButton size=\"small\" color=\"primary\"\r\n              onClick={()=>{this.handleOpenWebmonsDialog(props)}}>\r\n              <ViewListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n      </Grid>\r\n    {!this.state.readOnly ?\r\n      <Grid item xs=\"3\" sm=\"2\">\r\n        <div>\r\n          <Tooltip title=\"Edit\" arrow>\r\n            <IconButton size=\"small\" color=\"primary\" \r\n              onClick={()=>{this.handleOpenEditDialog(props)}}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n\r\n          <Tooltip title=\"Delete\" arrow>\r\n            <IconButton size=\"small\" color=\"secondary\"\r\n              onClick={()=>{this.handleOpenDeleteDialog(props)}}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </div>\r\n      </Grid> : null }\r\n    </Grid>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const { classes } = this.props;\r\n    const array = this.state.userWebmons;\r\n    const arrayCount = array.length;\r\n    return(\r\n      <div className={classes.root}>\r\n        <div>\r\n          {!this.state.readOnly ? \r\n          <div className=\" text-right mb-2\">\r\n            <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={()=>{this.setState({openDialog:true})}}>\r\n              Add User <AddIcon fontSize=\"small\"/>\r\n            </Button>\r\n          </div> : null}\r\n\r\n          <Dialog maxWidth=\"sm\" open={this.state.openDialog} onClose={this.handleCloseDialog.bind(this)}>\r\n            <DialogTitle>{this.state.isCreateDialog ? \"Create New User\" : \"Edit User\"}</DialogTitle>\r\n            <DialogContent>\r\n              <form id=\"userForm\" ref={(el) => this.userFormRef = el}>\r\n                <Grid container spacing={2}>\r\n\r\n                  <Grid item xs={12} style={{display: this.state.formErrorMessage ? \"block\" : \"none\"}}>\r\n                    <div className=\"alert alert-danger\">{this.state.formErrorMessage}</div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\" sm=\"6\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"uName\">Name</label>\r\n                      <input  type=\"uName\" className={\"form-control \" + (this.state.inputError.uName ? \"is-invalid\" : \"\")} id=\"uName\" placeholder=\"Name\" name=\"name\" defaultValue={this.state.inputFields.name} />\r\n                      <div style={{display: this.state.inputError.uName ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                        Please provide a valid name.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\" sm=\"6\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"uEmail\">Email</label>\r\n                      <input  type=\"uEmail\" className={\"form-control \" + (this.state.inputError.uEmail ? \"is-invalid\" : \"\")} id=\"uEmail\" placeholder=\"email@example.com\" name=\"email\" defaultValue={this.state.inputFields.email} />\r\n                      <div style={{display: this.state.inputError.uEmail ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                        Please provide an email.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n\r\n              <LinearProgress className=\"mt-3\" style={{display: this.state.dialogProgress ? \"block\":\"none\"}} />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button size=\"small\" variant=\"contained\" onClick={this.handleAddUpdateUser.bind(this)} color=\"primary\">\r\n                {this.state.isCreateDialog ? \"Create\" : \"Update\"}\r\n              </Button>\r\n              <Button variant=\"contained\" size=\"small\" onClick={this.handleCloseDialog.bind(this)} color=\"default\">\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <div className=\"grid-group\">\r\n            <div className=\"grid-header e-grid\">\r\n                <Grid container>\r\n                  <Grid item sm=\"1\" className=\"d-none d-sm-block\">ID</Grid>\r\n                  <Grid item xs=\"7\"sm={this.state.readOnly ? \"4\" : \"3\"}>Name</Grid>\r\n                  <Grid item sm={this.state.readOnly ? \"4\" : \"3\"} className=\"d-none d-sm-block\">Email</Grid>\r\n                  <Grid item xs=\"2\" className=\"d-none d-sm-block\" sm=\"2\">Webmons</Grid>\r\n                  {!this.state.readOnly ? <Grid item xs=\"4\" sm=\"2\">Action</Grid> : null}\r\n                </Grid>\r\n              </div>\r\n            <GridComponent \r\n              id=\"noHeaderGrid\"\r\n              ref={g => (this.grid = g)}\r\n              dataSource={this.state.users}\r\n              allowPaging={true}\r\n              allowSo\r\n              pageSettings={{pageSize: 10}}\r\n              >\r\n              <ColumnsDirective>\r\n                <ColumnDirective template={this.template} />\r\n              </ColumnsDirective>\r\n              <Inject services={[Page]} />\r\n            </GridComponent>\r\n          </div>\r\n          \r\n        </div>\r\n\r\n        <Dialog\r\n          open={this.state.openDeleteDialog}\r\n          onClose={this.handleCloseDeleteDialog.bind(this)}>\r\n          <DialogTitle>{\"Confirm Delete User\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              All owned webmons of this user will also be removed. Are you sure you want to continue?\r\n            </DialogContentText>\r\n          </DialogContent>\r\n\r\n          <LinearProgress className=\"mt-3\" style={{display: this.state.dialogProgressDelete ? \"block\":\"none\"}} />\r\n          <DialogActions>\r\n            <Button size=\"small\" variant=\"contained\" onClick={this.handleCloseDeleteDialog.bind(this)} color=\"default\">\r\n              Cancel\r\n            </Button>\r\n            <Button size=\"small\" variant=\"contained\" onClick={this.handleDeleteUser.bind(this)} color=\"primary\" autoFocus>\r\n              Confirm\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog> \r\n\r\n        <Dialog maxWidth=\"sm\" className={classes.noButtonOutline} open={this.state.openWebmonsDialog} onClose={this.handleCloseWebmonsDialog.bind(this)}>\r\n          <DialogTitle>User Webmons \r\n             {!this.state.readOnly ? \r\n            <IconButton className=\"float-right\" onClick={this.handleOpenAddUmon.bind(this)}>\r\n              <AddCircleOutlineIcon />\r\n            </IconButton> : null }\r\n          </DialogTitle>\r\n          <DialogContent >\r\n          \r\n          {this.state.openAddEditWebmon ? \r\n          <form id=\"userWebmonForm\" ref={(el) => this.webmonFormRef = el} style={{position:\"absolute\",zIndex:\"3\", top:\"14%\",left:\"0\"}}>\r\n            <Card>\r\n              <CardContent>\r\n                <Grid container spacing={1}>\r\n                  <Grid item xs={12} style={{display: this.state.uMonErormErrorMessage ? \"block\" : \"none\"}}>\r\n                    <div className=\"alert alert-danger\">{this.state.uMonErormErrorMessage}</div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"umWebmon\">Webmon</label>\r\n                      <select disabled={!this.state.isAddUserWebmon} id=\"umWebmon\" defaultValue={this.state.inputFields.umWebmon} name=\"webmonId\" className={\"form-control \" + (this.state.inputError.umWebmon ? \"is-invalid\" : \"\")}>\r\n                        <option>Choose...</option>\r\n                        {this.state.webmons.map((item)=>{\r\n                            return <option key={item.key} data-tokens={item.name} value={item.webmonId}>{item.name}</option>\r\n                        })}\r\n                      </select>\r\n                      <div style={{display: this.state.inputError.umWebmon ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                      Please provide appropriate attribute.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\" sm=\"6\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"umName\">Name</label>\r\n                      <input  type=\"text\" className={\"form-control \" + (this.state.inputError.umName ? \"is-invalid\" : \"\")} id=\"umName\" placeholder=\"Name\" name=\"name\" defaultValue={this.state.inputFields.umName} />\r\n                      <div style={{display: this.state.inputError.umName ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                      Please provide a name.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\" sm=\"6\">\r\n                    <div className=\"form-group mb-0\">\r\n                      <label for=\"umLevel\">Level</label>\r\n                      <input  type=\"number\" className={\"form-control \" + (this.state.inputError.umLevel ? \"is-invalid\" : \"\")} id=\"umLevel\" placeholder=\"Level\" name=\"level\" defaultValue={this.state.inputFields.umLevel} />\r\n                      <div style={{display: this.state.inputError.umLevel ? \"block\" : \"none\"}} class=\"invalid-feedback\">\r\n                        Please provide a level.\r\n                      </div>\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item xs=\"12\">\r\n                    <LinearProgress className=\"my-3\" style={{display: this.state.dialogProgress ? \"block\":\"none\"}} />\r\n                  </Grid>\r\n\r\n                </Grid>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button className=\"mr-2\" variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.handleAddEditUserWebmon.bind(this)}>\r\n                  {this.state.isAddUserWebmon ? \"Add\" : \"Update\"}</Button>\r\n                <Button variant=\"contained\" color=\"default\" size=\"small\" onClick={this.handleCloseAddEditUserWebmon.bind(this)}>Cancel</Button>\r\n              </CardActions>\r\n            </Card>\r\n            \r\n          </form> : \"\"}\r\n            \r\n\r\n            <Grid container spacing={1}>\r\n              {arrayCount > 0 ? <Grid container spacing={1}>\r\n                {this.state.userWebmons.map((webmon) => {\r\n                  return <Grid key={webmon.key} item xs=\"12\" sm=\"6\">\r\n                      <Card>\r\n                        <CardContent>\r\n                          <Grid container spacing={1}>\r\n                            <Grid xs=\"12\" item>\r\n                              <span className=\"mr-2\" style={{fontSize:\"x-large\"}}>{webmon.name}</span> \r\n                              <span className=\"font-italic\">Lv.{webmon.level}</span>\r\n                            </Grid>\r\n                            <Grid xs=\"12\" item>\r\n                              <span className=\"font-italic\">{webmon.webmon}</span>  \r\n                            </Grid>\r\n                            <Grid xs=\"12\" item>\r\n                              <span style={{color:colorRating(webmon.rating)}}>\r\n                                {webmon.rating}\r\n                              </span>\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              {webmon.type} Species\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              {webmon.attribute} Attribute\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              <AttackIcon className=\"small-icon\"/>&nbsp; {webmon.attack}\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              <HealthIcon className=\"small-icon\"/>&nbsp; {webmon.health}\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              <PhysicalDefIcon className=\"small-icon\"/>&nbsp; {webmon.physicalDefense}\r\n                            </Grid>\r\n                            <Grid xs=\"12\" sm=\"6\" item>\r\n                              <MagicDefIcon className=\"small-icon\"/>&nbsp; {webmon.magicDefense}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </CardContent>\r\n                        {!this.state.readOnly ? \r\n                        <CardActions className={classes.noButtonOutline}>\r\n                          <Button variant=\"text\" color=\"default\" onClick={()=>{this.handleEditUserWebmon(webmon)}}>\r\n                            Edit\r\n                          </Button>\r\n                          <Button variant=\"text\" color=\"secondary\" onClick={()=>{this.handleDeleteUserWebmon(webmon.id)}}>\r\n                            Delete\r\n                          </Button>\r\n                        </CardActions> : null }\r\n                      </Card>\r\n                    </Grid> \r\n                })}\r\n              </Grid> : <div>This User doesn't own any webmons.</div>}\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleCloseWebmonsDialog.bind(this)} color=\"default\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        <Snackbar\r\n          open={this.state.snackBarSuccess}\r\n          autoHideDuration={4000}\r\n          onClose={()=>{this.setState({snackBarSuccess:false})}}\r\n        >\r\n          <MuiAlert elevation={6} variant=\"filled\" onClose={()=>{this.setState({snackBarSuccess:false})}} severity=\"success\">\r\n            {this.state.snackBarMessage} \r\n          </MuiAlert>\r\n        </Snackbar>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(UsersTabs);","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\home\\creator-tabs\\WebmonsTab.jsx",[],"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\js\\common.js",["67"],"  \r\n  export function colorRating(rating){\r\n\r\n    switch(rating){\r\n      case 'Myth':\r\n        // return '#000'\r\n        return '#3b0000'\r\n      case 'Legendary':\r\n        return '#FFD500'\r\n      case 'Epic':\r\n        return '#9C27B0'\r\n      case 'Rare':\r\n        return '#3F51B5'\r\n      case 'Uncommon':\r\n        return '#4CAF50'\r\n      case 'Common':\r\n        return '#9E9E9E'\r\n    }\r\n\r\n  };","C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\myApp\\WebmonBattles\\src\\main\\webapp\\src\\components\\footer\\footer.jsx",[],{"ruleId":"68","severity":1,"message":"69","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":9},{"ruleId":"68","severity":1,"message":"72","line":7,"column":8,"nodeType":"70","messageId":"71","endLine":7,"endColumn":14},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"68","severity":1,"message":"77","line":1,"column":26,"nodeType":"70","messageId":"71","endLine":1,"endColumn":32},{"ruleId":"68","severity":1,"message":"78","line":1,"column":34,"nodeType":"70","messageId":"71","endLine":1,"endColumn":40},{"ruleId":"68","severity":1,"message":"79","line":1,"column":42,"nodeType":"70","messageId":"71","endLine":1,"endColumn":47},{"ruleId":"68","severity":1,"message":"80","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":14},{"ruleId":"68","severity":1,"message":"81","line":4,"column":10,"nodeType":"70","messageId":"71","endLine":4,"endColumn":15},{"ruleId":"68","severity":1,"message":"82","line":4,"column":33,"nodeType":"70","messageId":"71","endLine":4,"endColumn":37},{"ruleId":"68","severity":1,"message":"83","line":4,"column":39,"nodeType":"70","messageId":"71","endLine":4,"endColumn":49},{"ruleId":"68","severity":1,"message":"84","line":11,"column":8,"nodeType":"70","messageId":"71","endLine":11,"endColumn":14},{"ruleId":"85","severity":1,"message":"86","line":137,"column":48,"nodeType":"87","endLine":137,"endColumn":64},{"ruleId":"68","severity":1,"message":"88","line":3,"column":9,"nodeType":"70","messageId":"71","endLine":3,"endColumn":15},{"ruleId":"68","severity":1,"message":"89","line":3,"column":128,"nodeType":"70","messageId":"71","endLine":3,"endColumn":139},{"ruleId":"90","severity":1,"message":"91","line":77,"column":5,"nodeType":"92","messageId":"93","endLine":77,"endColumn":27},{"ruleId":"94","severity":1,"message":"95","line":7,"column":3,"nodeType":"96","messageId":"97","endLine":9,"endColumn":4},{"ruleId":"68","severity":1,"message":"98","line":267,"column":17,"nodeType":"70","messageId":"71","endLine":267,"endColumn":22},{"ruleId":"99","severity":1,"message":"100","line":4,"column":5,"nodeType":"101","messageId":"102","endLine":18,"endColumn":6},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","no-native-reassign",["103"],"no-negated-in-lhs",["104"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Footer' is defined but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'dragon' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Button' is defined but never used.","'CardActions' is defined but never used.","no-dupe-keys","Duplicate key '& .MuiTabs-indicator'.","ObjectExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'error' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]